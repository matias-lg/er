// Generated by Peggy 3.0.2.
//
// https://peggyjs.org/

"use strict";


  const KEYWORDS = [
"entity",
"extends",
"key",
"pkey",
"relation",
"aggregation",
"depends on"
  ]

  function getLocation(location_fun) {
    const location = location_fun();
    const { source, ...rest } = location;
    return rest;
  }

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { start: peg$parsestart };
  var peg$startRuleFunction = peg$parsestart;

  var peg$c0 = "\n";
  var peg$c1 = ":";
  var peg$c2 = ",";
  var peg$c3 = "!";
  var peg$c4 = "{";
  var peg$c5 = "}";
  var peg$c6 = "[";
  var peg$c7 = "]";
  var peg$c8 = "(";
  var peg$c9 = ")";
  var peg$c10 = "entity";
  var peg$c11 = "extends";
  var peg$c12 = "key";
  var peg$c13 = "pkey";
  var peg$c14 = "relation";
  var peg$c15 = "aggregation";
  var peg$c16 = "depends on";
  var peg$c17 = "through";

  var peg$r0 = /^[ \t]/;
  var peg$r1 = /^[0-9]/;
  var peg$r2 = /^[A-Z]/;
  var peg$r3 = /^[a-zA-Z0-9_\xE1\xE9\xED\xF3\xFA\xC1\xC9\xCD\xD3\xDA\xF1\xD1]/;
  var peg$r4 = /^[ \t\n]/;

  var peg$e0 = peg$literalExpectation("\n", false);
  var peg$e1 = peg$classExpectation([" ", "\t"], false, false);
  var peg$e2 = peg$literalExpectation(":", false);
  var peg$e3 = peg$literalExpectation(",", false);
  var peg$e4 = peg$otherExpectation("relationship attribute ");
  var peg$e5 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e6 = peg$classExpectation([["A", "Z"]], false, false);
  var peg$e7 = peg$literalExpectation("!", false);
  var peg$e8 = peg$otherExpectation("aggregation identifier");
  var peg$e9 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_", "\xE1", "\xE9", "\xED", "\xF3", "\xFA", "\xC1", "\xC9", "\xCD", "\xD3", "\xDA", "\xF1", "\xD1"], false, false);
  var peg$e10 = peg$literalExpectation("{", false);
  var peg$e11 = peg$literalExpectation("}", false);
  var peg$e12 = peg$literalExpectation("[", false);
  var peg$e13 = peg$literalExpectation("]", false);
  var peg$e14 = peg$literalExpectation("(", false);
  var peg$e15 = peg$literalExpectation(")", false);
  var peg$e16 = peg$literalExpectation("entity", true);
  var peg$e17 = peg$literalExpectation("extends", true);
  var peg$e18 = peg$otherExpectation("key");
  var peg$e19 = peg$literalExpectation("key", false);
  var peg$e20 = peg$otherExpectation("partial key");
  var peg$e21 = peg$literalExpectation("pkey", false);
  var peg$e22 = peg$literalExpectation("relation", true);
  var peg$e23 = peg$literalExpectation("aggregation", true);
  var peg$e24 = peg$literalExpectation("depends on", true);
  var peg$e25 = peg$otherExpectation("1 or more whitespaces");
  var peg$e26 = peg$classExpectation([" ", "\t", "\n"], false, false);
  var peg$e27 = peg$otherExpectation("0 or more whitespaces");
  var peg$e28 = peg$literalExpectation("through", true);
  var peg$e29 = peg$otherExpectation("relationship identifier");
  var peg$e30 = peg$otherExpectation("entity identifier");
  var peg$e31 = peg$otherExpectation("attribute identifier");
  var peg$e32 = peg$otherExpectation("parent identifier");

  var peg$f0 = function() {return null};
  var peg$f1 = function(all) {
    const elements = all.filter(ele => ele != null)
    const er = {entities: [], relationships: [], aggregations: []};
    for (const e of elements) {
    	if (e.type == "entity") er.entities.push(e);
        if (e.type == "relationship") er.relationships.push(e);
        if (e.type == "aggregation") er.aggregations.push(e);
    }
  	return er;
  };
  var peg$f2 = function(identifier, deps) {return deps};
  var peg$f3 = function(identifier, dependsOn, e) {return e};
  var peg$f4 = function(identifier, dependsOn, head, e) {return e};
  var peg$f5 = function(identifier, dependsOn, head, tail) {return [head, ...tail]};
  var peg$f6 = function(identifier, dependsOn, attributes) {
        return {
            type: "entity",
            name: identifier,
            attributes: attributes.length == 0? [] : attributes[0],
            hasParent: false,
            parentName: null,
            hasDependencies: true,
            dependsOn,
            location: getLocation(location)
        }
    };
  var peg$f7 = function(identifier, childAttributes) {return true};
  var peg$f8 = function(identifier, childAttributes, isKey) {
    	const attribute = {name: identifier, location: getLocation(location)}
        attribute.isKey = isKey === true
        const isComposite = childAttributes !== null
        attribute.isComposite  = isComposite 
        attribute.childAttributesNames = isComposite ? childAttributes : null
        return attribute
    };
  var peg$f9 = function(relationshipName) { return {relationshipName}};
  var peg$f10 = function(identifier, parent) {return parent};
  var peg$f11 = function(identifier, parentIdentifier, e) {return e};
  var peg$f12 = function(identifier, parentIdentifier, head, e) {return e};
  var peg$f13 = function(identifier, parentIdentifier, head, tail) {return [head, ...tail]};
  var peg$f14 = function(identifier, parentIdentifier, attributes) {
        return {
            type: "entity",
            name: identifier,
            attributes: attributes.length == 0? [] : attributes[0],
            hasParent: parentIdentifier !== null,
            parentName: parentIdentifier,
            hasDependencies: false,
            dependsOn: null,
            location: getLocation(location)
        }
    };
  var peg$f15 = function(identifier, childAttributes) {return true};
  var peg$f16 = function(identifier, childAttributes, isKey) {
    	const attribute = {name: identifier, location: getLocation(location)}
        attribute.isKey = isKey === true
        const isComposite = childAttributes !== null
        attribute.isComposite = isComposite
        attribute.childAttributesNames = isComposite? childAttributes : null
        return attribute
    };
  var peg$f17 = function(childAttribs) {return childAttribs};
  var peg$f18 = function(h) {return h};
  var peg$f19 = function(head, t) {return t};
  var peg$f20 = function(head, tail) {return [head, ...tail]};
  var peg$f21 = function(attributes) {return attributes};
  var peg$f22 = function(parent) {return parent};
  var peg$f23 = function(identifier, participants, e) {return e};
  var peg$f24 = function(identifier, participants, head, e) {return e};
  var peg$f25 = function(identifier, participants, head, tail) {return [head, ...tail]};
  var peg$f26 = function(identifier, participants, attribList) {return attribList === null? [] : attribList};
  var peg$f27 = function(identifier, participants, attributes) {
        return {
    		 type: "relationship",
    		 name: identifier,
             participantEntities: participants,
    		 attributes: attributes === null? [] : attributes,
             location: getLocation(location)
             }
    };
  var peg$f28 = function(iden) { return{
        name: iden,
        isComposite: false,
        childAttributesNames: null,
        location: getLocation(location)
    }
};
  var peg$f29 = function(p) {return p};
  var peg$f30 = function(pHead, p) {return p};
  var peg$f31 = function(pHead, pTail) {return [pHead, ...pTail]};
  var peg$f32 = function(participants) {return participants};
  var peg$f33 = function(entityName, childParticipants) {
    return {
        entityName,
        isComposite: true,
        childParticipants,
        location: getLocation(location)
    }
};
  var peg$f34 = function(childParticipants) {return childParticipants};
  var peg$f35 = function(p) {return p};
  var peg$f36 = function(pHead, p) {return p};
  var peg$f37 = function(pHead, pTail) {return [pHead, ...pTail]};
  var peg$f38 = function(participants) {return participants};
  var peg$f39 = function(entityName, cardinalityInfo) {
     {
         let cardinality = "N";
         let isTotal = false;
         if (cardinalityInfo !== null) {
                cardinality = cardinalityInfo.cardinality;
                isTotal = cardinalityInfo.isTotalParticipation;
         }
         return {
                entityName,
                isComposite: false,
                cardinality,
                participation: isTotal? "total" : "partial",
                location: getLocation(location)
         }
    }
};
  var peg$f40 = function(c, isTotal) {return { cardinality: c, isTotalParticipation: isTotal }};
  var peg$f41 = function(nums) {return nums.join('')};
  var peg$f42 = function(cardinality) { return cardinality === null? "N" : cardinality };
  var peg$f43 = function(isTotal) { return isTotal !== null};
  var peg$f44 = function(identifier, aggregatedRelationshipName) { return {
    type: "aggregation",
    name: identifier,
    aggregatedRelationshipName,
    location: getLocation(location)
    }
};
  var peg$f45 = function(characters) {return KEYWORDS.some(kw => kw == characters.join('').toLowerCase())};
  var peg$f46 = function(characters) {return characters.join('')};
  var peg$currPos = 0;
  var peg$savedPos = 0;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = 0;
  var peg$maxFailExpected = [];
  var peg$silentFails = 0;

  var peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsestart() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseentity();
    if (s2 === peg$FAILED) {
      s2 = peg$parseweakEntity();
      if (s2 === peg$FAILED) {
        s2 = peg$parserelationship();
        if (s2 === peg$FAILED) {
          s2 = peg$parseaggregation();
        }
      }
    }
    if (s2 === peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse_();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s2;
        s3 = peg$f0();
      }
      s2 = s3;
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseentity();
      if (s2 === peg$FAILED) {
        s2 = peg$parseweakEntity();
        if (s2 === peg$FAILED) {
          s2 = peg$parserelationship();
          if (s2 === peg$FAILED) {
            s2 = peg$parseaggregation();
          }
        }
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s2;
          s3 = peg$f0();
        }
        s2 = s3;
      }
    }
    peg$savedPos = s0;
    s1 = peg$f1(s1);
    s0 = s1;

    return s0;
  }

  function peg$parseweakEntity() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = peg$parsedeclareEntity();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseentityIdentifier();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsedeclareWeak();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s4;
              s4 = peg$f2(s3, s6);
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_0();
            s6 = peg$parseLcurly();
            if (s6 !== peg$FAILED) {
              s7 = peg$parse_0();
              s8 = [];
              s9 = peg$currPos;
              s10 = peg$currPos;
              s11 = peg$parse_0();
              s12 = peg$parseWeakEntityAttribute();
              if (s12 !== peg$FAILED) {
                peg$savedPos = s10;
                s10 = peg$f3(s3, s4, s12);
              } else {
                peg$currPos = s10;
                s10 = peg$FAILED;
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 10) {
                  s13 = peg$c0;
                  peg$currPos++;
                } else {
                  s13 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s13 !== peg$FAILED) {
                  s14 = peg$parse_0();
                  s15 = peg$parseWeakEntityAttribute();
                  if (s15 !== peg$FAILED) {
                    peg$savedPos = s12;
                    s12 = peg$f4(s3, s4, s10, s15);
                  } else {
                    peg$currPos = s12;
                    s12 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s12;
                  s12 = peg$FAILED;
                }
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s13 = peg$c0;
                    peg$currPos++;
                  } else {
                    s13 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s13 !== peg$FAILED) {
                    s14 = peg$parse_0();
                    s15 = peg$parseWeakEntityAttribute();
                    if (s15 !== peg$FAILED) {
                      peg$savedPos = s12;
                      s12 = peg$f4(s3, s4, s10, s15);
                    } else {
                      peg$currPos = s12;
                      s12 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s12;
                    s12 = peg$FAILED;
                  }
                }
                peg$savedPos = s9;
                s9 = peg$f5(s3, s4, s10, s11);
              } else {
                peg$currPos = s9;
                s9 = peg$FAILED;
              }
              while (s9 !== peg$FAILED) {
                s8.push(s9);
                if (s8.length >= 1) {
                  s9 = peg$FAILED;
                } else {
                  s9 = peg$currPos;
                  s10 = peg$currPos;
                  s11 = peg$parse_0();
                  s12 = peg$parseWeakEntityAttribute();
                  if (s12 !== peg$FAILED) {
                    peg$savedPos = s10;
                    s10 = peg$f3(s3, s4, s12);
                  } else {
                    peg$currPos = s10;
                    s10 = peg$FAILED;
                  }
                  if (s10 !== peg$FAILED) {
                    s11 = [];
                    s12 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 10) {
                      s13 = peg$c0;
                      peg$currPos++;
                    } else {
                      s13 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e0); }
                    }
                    if (s13 !== peg$FAILED) {
                      s14 = peg$parse_0();
                      s15 = peg$parseWeakEntityAttribute();
                      if (s15 !== peg$FAILED) {
                        peg$savedPos = s12;
                        s12 = peg$f4(s3, s4, s10, s15);
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s12;
                      s12 = peg$FAILED;
                    }
                    while (s12 !== peg$FAILED) {
                      s11.push(s12);
                      s12 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 10) {
                        s13 = peg$c0;
                        peg$currPos++;
                      } else {
                        s13 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e0); }
                      }
                      if (s13 !== peg$FAILED) {
                        s14 = peg$parse_0();
                        s15 = peg$parseWeakEntityAttribute();
                        if (s15 !== peg$FAILED) {
                          peg$savedPos = s12;
                          s12 = peg$f4(s3, s4, s10, s15);
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                    }
                    peg$savedPos = s9;
                    s9 = peg$f5(s3, s4, s10, s11);
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                }
              }
              s9 = peg$parse_0();
              s10 = peg$parseRcurly();
              if (s10 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f6(s3, s4, s8);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseWeakEntityAttribute() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseattributeIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
      }
      s3 = peg$parsedeclareComposite();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = [];
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s5 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
      }
      s5 = peg$currPos;
      s6 = peg$parsedeclareIsPartialKey();
      if (s6 !== peg$FAILED) {
        peg$savedPos = s5;
        s6 = peg$f7(s1, s3);
      }
      s5 = s6;
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f8(s1, s3, s5);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedeclareWeak() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsedependsOn();
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$r0.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e1); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parserelationshipDependencyIdentifier();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f9(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseentity() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = peg$parsedeclareEntity();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseentityIdentifier();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseentityExtends();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s4;
              s4 = peg$f10(s3, s6);
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s5 = peg$parse_0();
          s6 = peg$parseLcurly();
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_0();
            s8 = [];
            s9 = peg$currPos;
            s10 = peg$currPos;
            s11 = peg$parse_0();
            s12 = peg$parseentityAttribute();
            if (s12 !== peg$FAILED) {
              peg$savedPos = s10;
              s10 = peg$f11(s3, s4, s12);
            } else {
              peg$currPos = s10;
              s10 = peg$FAILED;
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 10) {
                s13 = peg$c0;
                peg$currPos++;
              } else {
                s13 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e0); }
              }
              if (s13 !== peg$FAILED) {
                s14 = peg$parse_0();
                s15 = peg$parseentityAttribute();
                if (s15 !== peg$FAILED) {
                  peg$savedPos = s12;
                  s12 = peg$f12(s3, s4, s10, s15);
                } else {
                  peg$currPos = s12;
                  s12 = peg$FAILED;
                }
              } else {
                peg$currPos = s12;
                s12 = peg$FAILED;
              }
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 10) {
                  s13 = peg$c0;
                  peg$currPos++;
                } else {
                  s13 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s13 !== peg$FAILED) {
                  s14 = peg$parse_0();
                  s15 = peg$parseentityAttribute();
                  if (s15 !== peg$FAILED) {
                    peg$savedPos = s12;
                    s12 = peg$f12(s3, s4, s10, s15);
                  } else {
                    peg$currPos = s12;
                    s12 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s12;
                  s12 = peg$FAILED;
                }
              }
              peg$savedPos = s9;
              s9 = peg$f13(s3, s4, s10, s11);
            } else {
              peg$currPos = s9;
              s9 = peg$FAILED;
            }
            while (s9 !== peg$FAILED) {
              s8.push(s9);
              if (s8.length >= 1) {
                s9 = peg$FAILED;
              } else {
                s9 = peg$currPos;
                s10 = peg$currPos;
                s11 = peg$parse_0();
                s12 = peg$parseentityAttribute();
                if (s12 !== peg$FAILED) {
                  peg$savedPos = s10;
                  s10 = peg$f11(s3, s4, s12);
                } else {
                  peg$currPos = s10;
                  s10 = peg$FAILED;
                }
                if (s10 !== peg$FAILED) {
                  s11 = [];
                  s12 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s13 = peg$c0;
                    peg$currPos++;
                  } else {
                    s13 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s13 !== peg$FAILED) {
                    s14 = peg$parse_0();
                    s15 = peg$parseentityAttribute();
                    if (s15 !== peg$FAILED) {
                      peg$savedPos = s12;
                      s12 = peg$f12(s3, s4, s10, s15);
                    } else {
                      peg$currPos = s12;
                      s12 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s12;
                    s12 = peg$FAILED;
                  }
                  while (s12 !== peg$FAILED) {
                    s11.push(s12);
                    s12 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 10) {
                      s13 = peg$c0;
                      peg$currPos++;
                    } else {
                      s13 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e0); }
                    }
                    if (s13 !== peg$FAILED) {
                      s14 = peg$parse_0();
                      s15 = peg$parseentityAttribute();
                      if (s15 !== peg$FAILED) {
                        peg$savedPos = s12;
                        s12 = peg$f12(s3, s4, s10, s15);
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s12;
                      s12 = peg$FAILED;
                    }
                  }
                  peg$savedPos = s9;
                  s9 = peg$f13(s3, s4, s10, s11);
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
              }
            }
            s9 = peg$parse_0();
            s10 = peg$parseRcurly();
            if (s10 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f14(s3, s4, s8);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseentityAttribute() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseattributeIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
      }
      s3 = peg$parsedeclareComposite();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = [];
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s5 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
      }
      s5 = peg$currPos;
      s6 = peg$parsedeclareIsKey();
      if (s6 !== peg$FAILED) {
        peg$savedPos = s5;
        s6 = peg$f15(s1, s3);
      }
      s5 = s6;
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f16(s1, s3, s5);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedeclareComposite() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsebeginComposite();
    if (s1 !== peg$FAILED) {
      s2 = peg$parselistOfAttributes();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f17(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebeginComposite() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 58) {
      s1 = peg$c1;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselistOfAttributes() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseLbracket();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$currPos;
      s4 = [];
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s5 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
      }
      s5 = peg$parseattributeIdentifier();
      if (s5 !== peg$FAILED) {
        peg$savedPos = s3;
        s3 = peg$f18(s5);
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c2;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          if (peg$r0.test(input.charAt(peg$currPos))) {
            s8 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e1); }
          }
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            if (peg$r0.test(input.charAt(peg$currPos))) {
              s8 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e1); }
            }
          }
          s8 = peg$parseattributeIdentifier();
          if (s8 !== peg$FAILED) {
            peg$savedPos = s5;
            s5 = peg$f19(s3, s8);
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c2;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            if (peg$r0.test(input.charAt(peg$currPos))) {
              s8 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e1); }
            }
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              if (peg$r0.test(input.charAt(peg$currPos))) {
                s8 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e1); }
              }
            }
            s8 = peg$parseattributeIdentifier();
            if (s8 !== peg$FAILED) {
              peg$savedPos = s5;
              s5 = peg$f19(s3, s8);
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        peg$savedPos = s2;
        s2 = peg$f20(s3, s4);
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseRbracket();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f21(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseentityExtends() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsedeclareExtends();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseparentIdentifier();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f22(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserelationship() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16;

    s0 = peg$currPos;
    s1 = peg$parsedeclareRelationship();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parserelationshipIdentifier();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_0();
          s5 = peg$parselistOfParticipants();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parse_0();
            s8 = peg$parseLcurly();
            if (s8 !== peg$FAILED) {
              s9 = peg$parse_0();
              s10 = peg$currPos;
              s11 = peg$currPos;
              s12 = peg$parse_0();
              s13 = peg$parserelationShipAttribute();
              if (s13 !== peg$FAILED) {
                peg$savedPos = s11;
                s11 = peg$f23(s3, s5, s13);
              } else {
                peg$currPos = s11;
                s11 = peg$FAILED;
              }
              if (s11 !== peg$FAILED) {
                s12 = [];
                s13 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 10) {
                  s14 = peg$c0;
                  peg$currPos++;
                } else {
                  s14 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s14 !== peg$FAILED) {
                  s15 = peg$parse_0();
                  s16 = peg$parserelationShipAttribute();
                  if (s16 !== peg$FAILED) {
                    peg$savedPos = s13;
                    s13 = peg$f24(s3, s5, s11, s16);
                  } else {
                    peg$currPos = s13;
                    s13 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s13;
                  s13 = peg$FAILED;
                }
                while (s13 !== peg$FAILED) {
                  s12.push(s13);
                  s13 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s14 = peg$c0;
                    peg$currPos++;
                  } else {
                    s14 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s14 !== peg$FAILED) {
                    s15 = peg$parse_0();
                    s16 = peg$parserelationShipAttribute();
                    if (s16 !== peg$FAILED) {
                      peg$savedPos = s13;
                      s13 = peg$f24(s3, s5, s11, s16);
                    } else {
                      peg$currPos = s13;
                      s13 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s13;
                    s13 = peg$FAILED;
                  }
                }
                peg$savedPos = s10;
                s10 = peg$f25(s3, s5, s11, s12);
              } else {
                peg$currPos = s10;
                s10 = peg$FAILED;
              }
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              s11 = peg$parse_0();
              s12 = peg$parseRcurly();
              if (s12 !== peg$FAILED) {
                peg$savedPos = s6;
                s6 = peg$f26(s3, s5, s10);
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f27(s3, s5, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserelationShipAttribute() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsevalidWord();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f28(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }

    return s0;
  }

  function peg$parselistOfParticipants() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseLparen();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$currPos;
      s4 = [];
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s5 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
      }
      s5 = peg$parseCompositeParticipantEntity();
      if (s5 === peg$FAILED) {
        s5 = peg$parseparticipantEntity();
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s3;
        s3 = peg$f29(s5);
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c2;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          if (peg$r0.test(input.charAt(peg$currPos))) {
            s8 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e1); }
          }
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            if (peg$r0.test(input.charAt(peg$currPos))) {
              s8 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e1); }
            }
          }
          s8 = peg$parseCompositeParticipantEntity();
          if (s8 === peg$FAILED) {
            s8 = peg$parseparticipantEntity();
          }
          if (s8 !== peg$FAILED) {
            peg$savedPos = s5;
            s5 = peg$f30(s3, s8);
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c2;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            if (peg$r0.test(input.charAt(peg$currPos))) {
              s8 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e1); }
            }
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              if (peg$r0.test(input.charAt(peg$currPos))) {
                s8 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e1); }
              }
            }
            s8 = peg$parseCompositeParticipantEntity();
            if (s8 === peg$FAILED) {
              s8 = peg$parseparticipantEntity();
            }
            if (s8 !== peg$FAILED) {
              peg$savedPos = s5;
              s5 = peg$f30(s3, s8);
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        peg$savedPos = s2;
        s2 = peg$f31(s3, s4);
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseRparen();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f32(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCompositeParticipantEntity() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseentityIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsedeclareCompositeParticipantEntity();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f33(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedeclareCompositeParticipantEntity() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsebeginComposite();
    if (s1 !== peg$FAILED) {
      s2 = peg$parselistOfChildParticipants();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f34(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselistOfChildParticipants() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseLbracket();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$currPos;
      s4 = [];
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s5 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
      }
      s5 = peg$parseparticipantEntity();
      if (s5 !== peg$FAILED) {
        peg$savedPos = s3;
        s3 = peg$f35(s5);
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c2;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          if (peg$r0.test(input.charAt(peg$currPos))) {
            s8 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e1); }
          }
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            if (peg$r0.test(input.charAt(peg$currPos))) {
              s8 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e1); }
            }
          }
          s8 = peg$parseparticipantEntity();
          if (s8 !== peg$FAILED) {
            peg$savedPos = s5;
            s5 = peg$f36(s3, s8);
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c2;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            if (peg$r0.test(input.charAt(peg$currPos))) {
              s8 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e1); }
            }
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              if (peg$r0.test(input.charAt(peg$currPos))) {
                s8 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e1); }
              }
            }
            s8 = peg$parseparticipantEntity();
            if (s8 !== peg$FAILED) {
              peg$savedPos = s5;
              s5 = peg$f36(s3, s8);
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        peg$savedPos = s2;
        s2 = peg$f37(s3, s4);
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseRbracket();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f38(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseparticipantEntity() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseentityIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsedeclareCardinality();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f39(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedeclareCardinality() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = [];
    if (peg$r0.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecardinality();
      s3 = peg$parsedeclareTotalparticipation();
      peg$savedPos = s0;
      s0 = peg$f40(s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecardinality() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    if (peg$r1.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$r1.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s1;
      s2 = peg$f41(s2);
    }
    s1 = s2;
    if (s1 === peg$FAILED) {
      if (peg$r2.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e6); }
      }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    peg$savedPos = s0;
    s1 = peg$f42(s1);
    s0 = s1;

    return s0;
  }

  function peg$parsedeclareTotalparticipation() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 33) {
      s1 = peg$c3;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    peg$savedPos = s0;
    s1 = peg$f43(s1);
    s0 = s1;

    return s0;
  }

  function peg$parseaggregation() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    s1 = peg$parsedeclareAggregation();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseaggregationIdentifier();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_0();
          s5 = peg$parseLparen();
          if (s5 !== peg$FAILED) {
            s6 = peg$parserelationshipIdentifier();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseRparen();
              if (s7 !== peg$FAILED) {
                s8 = peg$currPos;
                s9 = peg$parse_0();
                s10 = peg$parseLcurly();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parse_0();
                  s12 = peg$parseRcurly();
                  if (s12 !== peg$FAILED) {
                    s9 = [s9, s10, s11, s12];
                    s8 = s9;
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
                if (s8 === peg$FAILED) {
                  s8 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f44(s3, s6);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseaggregationIdentifier() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsevalidWord();
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }

    return s0;
  }

  function peg$parsevalidWord() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$r3.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e9); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$r3.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e9); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f45(s1);
      if (s2) {
        s2 = peg$FAILED;
      } else {
        s2 = undefined;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f46(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLcurly() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 123) {
      s0 = peg$c4;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }

    return s0;
  }

  function peg$parseRcurly() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 125) {
      s0 = peg$c5;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e11); }
    }

    return s0;
  }

  function peg$parseLbracket() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 91) {
      s0 = peg$c6;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }

    return s0;
  }

  function peg$parseRbracket() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 93) {
      s0 = peg$c7;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e13); }
    }

    return s0;
  }

  function peg$parseLparen() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 40) {
      s0 = peg$c8;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }

    return s0;
  }

  function peg$parseRparen() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 41) {
      s0 = peg$c9;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }

    return s0;
  }

  function peg$parsedeclareEntity() {
    var s0;

    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c10) {
      s0 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }

    return s0;
  }

  function peg$parsedeclareExtends() {
    var s0;

    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c11) {
      s0 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }

    return s0;
  }

  function peg$parsedeclareIsKey() {
    var s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 3) === peg$c12) {
      s0 = peg$c12;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }

    return s0;
  }

  function peg$parsedeclareIsPartialKey() {
    var s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 4) === peg$c13) {
      s0 = peg$c13;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }

    return s0;
  }

  function peg$parsedeclareRelationship() {
    var s0;

    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c14) {
      s0 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }

    return s0;
  }

  function peg$parsedeclareAggregation() {
    var s0;

    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c15) {
      s0 = input.substr(peg$currPos, 11);
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }

    return s0;
  }

  function peg$parsedependsOn() {
    var s0;

    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c16) {
      s0 = input.substr(peg$currPos, 10);
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    if (peg$r4.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e26); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$r4.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e26); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }

    return s0;
  }

  function peg$parse_0() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    if (peg$r4.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e26); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (peg$r4.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e26); }
      }
    }
    peg$silentFails--;
    s1 = peg$FAILED;
    if (peg$silentFails === 0) { peg$fail(peg$e27); }

    return s0;
  }

  function peg$parsethrough() {
    var s0;

    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c17) {
      s0 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e28); }
    }

    return s0;
  }

  function peg$parserelationshipDependencyIdentifier() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsevalidWord();
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e29); }
    }

    return s0;
  }

  function peg$parseentityIdentifier() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsevalidWord();
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e30); }
    }

    return s0;
  }

  function peg$parseattributeIdentifier() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsevalidWord();
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }

    return s0;
  }

  function peg$parseparentIdentifier() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsevalidWord();
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e32); }
    }

    return s0;
  }

  function peg$parserelationshipIdentifier() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsevalidWord();
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e29); }
    }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse: peg$parse
};
